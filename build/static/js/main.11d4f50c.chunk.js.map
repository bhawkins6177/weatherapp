{"version":3,"sources":["logo.svg","Ui.js","form.js","App.js","reportWebVitals.js","index.js"],"names":["Ui","props","className","condition","location","typeof","temp","feelsLike","wind","humidity","Form","useState","searchCityValue","setSearchCityValue","weatherData","setWeatherData","onSubmit","e","preventDefault","fetch","mode","then","res","json","data","console","log","name","Math","round","main","weather","description","feels_like","speed","catch","err","placeholder","onChange","target","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAAe,I,mBCuBAA,MApBf,SAAYC,GACR,OACI,qBAAKC,UAAW,eAAhB,SACI,qBAAKA,UAAY,uBAAjB,SACI,sBAAKA,UAAY,UAAjB,UAEI,mBAAGA,UAAY,YAAf,SAA4BD,EAAME,YAClC,oBAAID,UAAY,WAAhB,SAA4BD,EAAMG,WAClC,sBAAMF,UAAY,UAAUG,OAAS,UAArC,SAAgDJ,EAAMK,OACtD,sBAAKJ,UAAU,UAAf,UACI,6CAAgBD,EAAMM,aACtB,6CAAgBN,EAAMO,KAAtB,UACA,0CAAaP,EAAMQ,SAAnB,kBC4DTC,MAvEf,WAGI,MAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAsCF,mBAAS,CAC3CL,KAAM,GACNF,SAAU,YACVD,UAAW,QACXI,UAAY,GACZE,SAAU,GACVD,KAAM,IANV,mBAAOM,EAAP,KAAoBC,EAApB,KAyCA,OACI,sBAAKb,UAAU,eAAf,UACI,sBAAMA,UAAU,OAAOc,SA7BT,SAACC,GACnBA,EAAEC,iBACFC,MAAM,oDAAD,OAAqDP,EAArD,0DAA6H,CAC9HQ,KAAM,SAELC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,EAAKG,MAEjBZ,EAAe,CACXT,KAAMsB,KAAKC,MAAML,EAAKM,KAAKxB,MAC3BF,SAAUoB,EAAKG,KACfxB,UAAWqB,EAAKO,QAAQ,GAAGC,YAC3BzB,UAAWiB,EAAKM,KAAKG,WACrBxB,SAAUe,EAAKM,KAAKrB,SACpBD,KAAMgB,EAAKhB,KAAK0B,WAIvBC,OAAM,SAAAC,GACHX,QAAQC,IAAIU,MAIpBvB,EAAmB,KAKf,SACI,uBACAX,UAAY,QACZyB,KAAO,OACPU,YAAc,OACdC,SAvCU,SAACrB,GACnBA,EAAEC,iBACFL,EAAmBI,EAAEsB,OAAOC,QAsCpBA,MAAS5B,MAKb,cAAC,EAAD,CAEAN,KAAQQ,EAAYR,KACpBF,SAAWU,EAAYV,SACvBD,UAAaW,EAAYX,UACzBI,UAAaO,EAAYP,UACzBE,SAAYK,EAAYL,SACxBD,KAAQM,EAAYN,WCrDjBiC,MAXf,WAEE,OACE,qBAAKvC,UAAU,MAAf,SAEE,cAAC,EAAD,OCESwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.11d4f50c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\n\n\nfunction Ui(props){\n    return(\n        <div className= 'main-content'>\n            <div className = 'main-weather-display'>\n                <div className = 'display'>\n                \n                    <p className = 'condition'>{props.condition}</p>\n                    <h1 className = 'location'>{props.location}</h1>\n                    <span className = 'degrees' typeof = \"degrees\">{props.temp}</span>\n                    <div className='details'>\n                        <p>Feels Like: {props.feelsLike}</p>\n                        <p>Wind Speed: {props.wind} Mph</p>\n                        <p>Humidty: {props.humidity}%</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Ui;","import { useState } from \"react\";\nimport Ui from './Ui'\n\n// my api key for this is : 8a78e069bb74338cceace00e40be926d : DONT DO THIS FOR REALI\nfunction Form (){\n\n    \n    const [searchCityValue, setSearchCityValue] = useState('');\n    const [weatherData, setWeatherData] = useState({\n        temp: 70,\n        location: 'Charlotte',\n        condition: 'Sunny',\n        feelsLike:  68,\n        humidity: 66,\n        wind: 2\n    })\n\n   const handleFunction = (e) =>{\n        e.preventDefault();\n        setSearchCityValue(e.target.value)\n    }\n\n   const submitFunction = (e) =>{\n        e.preventDefault();\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${searchCityValue}&units=imperial&appid=8a78e069bb74338cceace00e40be926d`,{\n            mode: 'cors'\n        })\n            .then(res=>res.json())\n            .then(data=>{\n                console.log(data.name)\n        \n                setWeatherData({\n                    temp: Math.round(data.main.temp),\n                    location: data.name,\n                    condition: data.weather[0].description,\n                    feelsLike: data.main.feels_like, \n                    humidity: data.main.humidity,\n                    wind: data.wind.speed\n\n                })\n            })\n            .catch(err=>{\n                console.log(err)\n\n            })\n            \n        setSearchCityValue('');    \n    }\n    \n    return(\n        <div className='main-display'>\n            <form className='form' onSubmit = {submitFunction}>\n                <input \n                className = 'input'\n                name = \"city\" \n                placeholder = \"City\"\n                onChange = {handleFunction}\n                value = {searchCityValue}>\n                </input>\n                {/* <button>Search!</button> */}\n                \n            </form>\n            <Ui \n            \n            temp = {weatherData.temp}\n            location= {weatherData.location}\n            condition = {weatherData.condition}\n            feelsLike = {weatherData.feelsLike}\n            humidity = {weatherData.humidity}\n            wind = {weatherData.wind}\n            />\n        </div>\n    )\n}\n\nexport default Form;","import logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Form from './form';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      \n      <Form />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from  'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}